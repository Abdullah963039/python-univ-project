[
    {
        "label": "InferenceEngine",
        "importPath": "data.inference_engine",
        "description": "data.inference_engine",
        "isExtraImport": true,
        "detail": "data.inference_engine",
        "documentation": {}
    },
    {
        "label": "tkinter",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tkinter",
        "description": "tkinter",
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "ttk",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "ttk",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "COOKING_TIME",
        "importPath": "data.constants",
        "description": "data.constants",
        "isExtraImport": true,
        "detail": "data.constants",
        "documentation": {}
    },
    {
        "label": "PROTIEN",
        "importPath": "data.constants",
        "description": "data.constants",
        "isExtraImport": true,
        "detail": "data.constants",
        "documentation": {}
    },
    {
        "label": "CALORIES",
        "importPath": "data.constants",
        "description": "data.constants",
        "isExtraImport": true,
        "detail": "data.constants",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "RecipeRecommendationApp",
        "importPath": "gui",
        "description": "gui",
        "isExtraImport": true,
        "detail": "gui",
        "documentation": {}
    },
    {
        "label": "RECIPES",
        "kind": 5,
        "importPath": "data.constants",
        "description": "data.constants",
        "peekOfCode": "RECIPES = [\n    {\n        \"name\": \"Quiche Lorraine\",\n        \"ingredients\": [\"pie crust\", \"eggs\", \"bacon\", \"heavy cream\", \"gruyere cheese\"],\n        \"cuisine\": \"french\",\n        \"diet_tags\": [\"non-vegan\"],\n        \"cook_time\": 50,\n        \"nutrition\": {\"calories\": 680, \"protein\": 25},\n    },\n    {",
        "detail": "data.constants",
        "documentation": {}
    },
    {
        "label": "RULES",
        "kind": 5,
        "importPath": "data.constants",
        "description": "data.constants",
        "peekOfCode": "RULES = [\n    {\n        \"name\": \"ingredient_overlap_rule\",\n        \"condition\": lambda pref, recipe: \"available_ingredients\" in pref,\n        \"action\": lambda pref, recipe: {  # Now takes both pref and recipe\n            \"reason\": \"Uses available ingredients\",\n            \"score_boost\": len(\n                [\n                    ing\n                    for ing in recipe[\"ingredients\"]",
        "detail": "data.constants",
        "documentation": {}
    },
    {
        "label": "CUISINES",
        "kind": 5,
        "importPath": "data.constants",
        "description": "data.constants",
        "peekOfCode": "CUISINES = [\n    \"French\",\n    \"Indian\",\n    \"Mediterranean\",\n    \"Italian\",\n    \"American\",\n    \"Mexican\",\n    \"Middle eastern\",\n    \"Chinese\",\n    \"Japanese\",",
        "detail": "data.constants",
        "documentation": {}
    },
    {
        "label": "DIETARY_TAGS",
        "kind": 5,
        "importPath": "data.constants",
        "description": "data.constants",
        "peekOfCode": "DIETARY_TAGS = [\"non-vegan\", \"vegan\", \"vegetarian\"]\nCOOKING_TIME = (10, 120)  # (Min, Max)\nPROTIEN = (2, 55)\nCALORIES = (150, 850)",
        "detail": "data.constants",
        "documentation": {}
    },
    {
        "label": "COOKING_TIME",
        "kind": 5,
        "importPath": "data.constants",
        "description": "data.constants",
        "peekOfCode": "COOKING_TIME = (10, 120)  # (Min, Max)\nPROTIEN = (2, 55)\nCALORIES = (150, 850)",
        "detail": "data.constants",
        "documentation": {}
    },
    {
        "label": "PROTIEN",
        "kind": 5,
        "importPath": "data.constants",
        "description": "data.constants",
        "peekOfCode": "PROTIEN = (2, 55)\nCALORIES = (150, 850)",
        "detail": "data.constants",
        "documentation": {}
    },
    {
        "label": "CALORIES",
        "kind": 5,
        "importPath": "data.constants",
        "description": "data.constants",
        "peekOfCode": "CALORIES = (150, 850)",
        "detail": "data.constants",
        "documentation": {}
    },
    {
        "label": "InferenceEngine",
        "kind": 6,
        "importPath": "data.inference_engine",
        "description": "data.inference_engine",
        "peekOfCode": "class InferenceEngine:\n    def __init__(self, recipes, rules):\n        self.recipes = recipes\n        self.rules = rules\n    def infer(self, preferences):\n        scored_recipes = []\n        for recipe in self.recipes:\n            # Strict cuisine filter first\n            if \"cuisine\" in preferences:\n                if recipe[\"cuisine\"] != preferences[\"cuisine\"]:",
        "detail": "data.inference_engine",
        "documentation": {}
    },
    {
        "label": "RecipeRecommender",
        "kind": 6,
        "importPath": "data.recommender_system",
        "description": "data.recommender_system",
        "peekOfCode": "class RecipeRecommender:\n    def __init__(self, recipes, rules):\n        self.inference_engine = InferenceEngine(recipes, rules)\n    def recommend(self, preferences):\n        return self.inference_engine.infer(preferences)\n    def recommend_by_ingredients(self, available_ingredients):\n        results = self.inference_engine.infer_by_ingredients(available_ingredients)\n        return [\n            {\n                \"recipe\": result[\"recipe\"],",
        "detail": "data.recommender_system",
        "documentation": {}
    },
    {
        "label": "IngredientsGui",
        "kind": 6,
        "importPath": "gui.ingredients",
        "description": "gui.ingredients",
        "peekOfCode": "class IngredientsGui(tk.Frame):\n    def __init__(self, parent: \"tk.Frame\", controller):\n        from data.recommender_system import RecipeRecommender\n        from data.constants import RECIPES, RULES\n        super().__init__(parent)\n        self.controller = controller\n        self.configure(bg=\"#f5f5f5\")\n        self.recommender = RecipeRecommender(RECIPES, RULES)\n        label = tk.Label(\n            self,",
        "detail": "gui.ingredients",
        "documentation": {}
    },
    {
        "label": "MainMenuScreen",
        "kind": 6,
        "importPath": "gui.main_screen",
        "description": "gui.main_screen",
        "peekOfCode": "class MainMenuScreen(tk.Frame):\n    def __init__(self, parent: \"tk.Frame\", controller):\n        super().__init__(parent)\n        self.controller = controller\n        self.configure(bg=\"#f5f5f5\")\n        self.render_link_btns( controller)\n    def render_link_btns(self, controller):\n        from gui.recipe import RecipeGui\n        from gui.ingredients import IngredientsGui\n        # Centered frame for buttons",
        "detail": "gui.main_screen",
        "documentation": {}
    },
    {
        "label": "RecipeGui",
        "kind": 6,
        "importPath": "gui.recipe",
        "description": "gui.recipe",
        "peekOfCode": "class RecipeGui(tk.Frame):\n    def __init__(self, parent: \"tk.Frame\", controller):\n        from data.recommender_system import RecipeRecommender\n        from data.constants import RECIPES, RULES\n        super().__init__(parent)\n        self.controller = controller\n        self.configure(bg=\"#f5f5f5\")\n        self.recommender = RecipeRecommender(RECIPES, RULES)\n        # Title label\n        label = tk.Label(",
        "detail": "gui.recipe",
        "documentation": {}
    },
    {
        "label": "ResultsScreen",
        "kind": 6,
        "importPath": "gui.results",
        "description": "gui.results",
        "peekOfCode": "class ResultsScreen(tk.Frame):\n    def __init__(\n        self,\n        parent: \"tk.Frame\",\n        controller,\n    ):\n        super().__init__(parent)\n        self.controller = controller\n        self.__results: List[dict] = []\n        self.__results_type: Literal[\"recipe\", \"ingredients\"] = \"recipe\"",
        "detail": "gui.results",
        "documentation": {}
    },
    {
        "label": "test_ingre",
        "kind": 5,
        "importPath": "gui.results",
        "description": "gui.results",
        "peekOfCode": "test_ingre = [\n    {\n        \"recipe\": {\n            \"name\": \"Quiche Lorraine\",\n            \"ingredients\": [\n                \"pie crust\",\n                \"eggs\",\n                \"bacon\",\n                \"heavy cream\",\n                \"gruyere cheese\",",
        "detail": "gui.results",
        "documentation": {}
    }
]